@startuml Shapes_L2

skinparam classAttributeIconSize 0

class BorderedCircle {
  + BorderedCircle(): 
  + getColor(): Color
}
class BorderedRenderer {
  + BorderedRenderer(): 
  + display(Graphics2D, Bouncable): void
  + getInstance(): BorderedRenderer
}
class BorderedShapeFactory {
  + BorderedShapeFactory(): 
  + createSquare(): BorderedSquare
  + createCircle(): BorderedCircle
  + getInstance(): BorderedShapeFactory
}
class BorderedSquare {
  + BorderedSquare(): 
  + getColor(): Color
}
interface Bouncable << interface >> {
  + move(): void
  + getShape(): Shape
  + draw(): void
  + getColor(): Color
}
class Bouncers {
  - Bouncers(): 
  - bouncers: LinkedList<Bouncable>
  - NBR_BY_CLICK: int
  - REFRESH_DELAY: int
  - update(Displayer): void
  - moveShapes(Displayer): void
  + main(String[]): void
  + run(): void
  - instantiate(ShapeFactory, int): void
}
abstract class Circle {
  + Circle(): 
  + getShape(): Shape
}
abstract class CustomShape {
  # CustomShape(): 
  # size: int
  - random: Random
  - speed: double
  - movement: Vector2D
  # position: Vector2D
  # renderer: Renderer
  # displayer: Displayer
  + draw(): void
  + move(): void
}
interface Displayer << interface >> {
  + getWidth(): int
  + addKeyListener(KeyAdapter): void
  + getHeight(): int
  + repaint(): void
  + getGraphics(): Graphics2D
  + setTitle(String): void
}
class FilledCircle {
  + FilledCircle(): 
  + getColor(): Color
}
class FilledRenderer {
  + FilledRenderer(): 
  + getInstance(): FilledRenderer
  + display(Graphics2D, Bouncable): void
}
class FilledShapeFactory {
  + FilledShapeFactory(): 
  + createSquare(): FilledSquare
  + createCircle(): FilledCircle
  + getInstance(): FilledShapeFactory
}
class FilledSquare {
  + FilledSquare(): 
  + getColor(): Color
}
class Instance {
  + Instance(): 
  ~ instance: FilledShapeFactory
}
class Instance {
  + Instance(): 
  ~ instance: FilledRenderer
}
class Instance {
  + Instance(): 
  ~ instance: BorderedRenderer
}
class Instance {
  + Instance(): 
  ~ instance: BorderedShapeFactory
}
class Instance {
  + Instance(): 
  ~ instance: MainWindow
}
class MainWindow {
  - MainWindow(): 
  - panel: Container
  # image: Image
  - frame: JFrame
  + getInstance(): MainWindow
  + getGraphics(): Graphics2D
  + addKeyListener(KeyAdapter): void
  + repaint(): void
  + getWidth(): int
  + setTitle(String): void
  + getHeight(): int
}
interface Renderer << interface >> {
  + display(Graphics2D, Bouncable): void
}
abstract class ShapeFactory {
  + ShapeFactory(): 
  + createCircle(): Circle
  + createSquare(): Square
}
abstract class Square {
  + Square(): 
  + getShape(): Shape
}
class Vector2D {
  + Vector2D(double, double): 
  - x: double
  - y: double
  + getY(): double
  + swapOnY(): void
  + normalize(): void
  + swapOnX(): void
  + getX(): double
}

BorderedCircle        -[#000082,plain]-^  Circle               
BorderedRenderer      -[#008200,dashed]-^  Renderer             
BorderedShapeFactory  -[#000082,plain]-^  ShapeFactory         
BorderedSquare        -[#000082,plain]-^  Square               
Circle                -[#000082,plain]-^  CustomShape          
CustomShape           -[#008200,dashed]-^  Bouncable            
FilledCircle          -[#000082,plain]-^  Circle               
FilledRenderer        -[#008200,dashed]-^  Renderer             
FilledShapeFactory    -[#000082,plain]-^  ShapeFactory         
FilledSquare          -[#000082,plain]-^  Square               
Instance              +-[#820000,plain]-  BorderedRenderer     
Instance              +-[#820000,plain]-  BorderedShapeFactory 
Instance              +-[#820000,plain]-  FilledRenderer       
Instance              +-[#820000,plain]-  FilledShapeFactory   
Instance              +-[#820000,plain]-  MainWindow           
MainWindow            -[#008200,dashed]-^  Displayer            
Square                -[#000082,plain]-^  CustomShape  



BorderedShapeFactory  ..>                 BorderedCircle : create
BorderedShapeFactory  ..>                 BorderedSquare : create

FilledShapeFactory    ..>                 FilledCircle : create
FilledShapeFactory    ..>                 FilledSquare : create
@enduml
